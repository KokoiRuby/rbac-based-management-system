// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"github.com/KokoiRuby/rbac-based-management-system/backend/domain/model"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newRoleMenuBinding(db *gorm.DB, opts ...gen.DOOption) roleMenuBinding {
	_roleMenuBinding := roleMenuBinding{}

	_roleMenuBinding.roleMenuBindingDo.UseDB(db, opts...)
	_roleMenuBinding.roleMenuBindingDo.UseModel(&model.RoleMenuBinding{})

	tableName := _roleMenuBinding.roleMenuBindingDo.TableName()
	_roleMenuBinding.ALL = field.NewAsterisk(tableName)
	_roleMenuBinding.ID = field.NewUint(tableName, "id")
	_roleMenuBinding.CreatedAt = field.NewTime(tableName, "created_at")
	_roleMenuBinding.UpdatedAt = field.NewTime(tableName, "updated_at")
	_roleMenuBinding.RoleID = field.NewUint(tableName, "role_id")
	_roleMenuBinding.MenuID = field.NewUint(tableName, "menu_id")
	_roleMenuBinding.Role = roleMenuBindingBelongsToRole{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Role", "model.Role"),
		UserList: struct {
			field.RelationField
			RoleList struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Role.UserList", "model.User"),
			RoleList: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Role.UserList.RoleList", "model.Role"),
			},
		},
		MenuList: struct {
			field.RelationField
			ParentMenu struct {
				field.RelationField
			}
			Children struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Role.MenuList", "model.Menu"),
			ParentMenu: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Role.MenuList.ParentMenu", "model.Menu"),
			},
			Children: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Role.MenuList.Children", "model.Menu"),
			},
		},
	}

	_roleMenuBinding.Menu = roleMenuBindingBelongsToMenu{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Menu", "model.Menu"),
	}

	_roleMenuBinding.fillFieldMap()

	return _roleMenuBinding
}

type roleMenuBinding struct {
	roleMenuBindingDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	RoleID    field.Uint
	MenuID    field.Uint
	Role      roleMenuBindingBelongsToRole

	Menu roleMenuBindingBelongsToMenu

	fieldMap map[string]field.Expr
}

func (r roleMenuBinding) Table(newTableName string) *roleMenuBinding {
	r.roleMenuBindingDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r roleMenuBinding) As(alias string) *roleMenuBinding {
	r.roleMenuBindingDo.DO = *(r.roleMenuBindingDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *roleMenuBinding) updateTableName(table string) *roleMenuBinding {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewUint(table, "id")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")
	r.RoleID = field.NewUint(table, "role_id")
	r.MenuID = field.NewUint(table, "menu_id")

	r.fillFieldMap()

	return r
}

func (r *roleMenuBinding) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *roleMenuBinding) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 7)
	r.fieldMap["id"] = r.ID
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["role_id"] = r.RoleID
	r.fieldMap["menu_id"] = r.MenuID

}

func (r roleMenuBinding) clone(db *gorm.DB) roleMenuBinding {
	r.roleMenuBindingDo.ReplaceConnPool(db.Statement.ConnPool)
	r.Role.db = db.Session(&gorm.Session{Initialized: true})
	r.Role.db.Statement.ConnPool = db.Statement.ConnPool
	r.Menu.db = db.Session(&gorm.Session{Initialized: true})
	r.Menu.db.Statement.ConnPool = db.Statement.ConnPool
	return r
}

func (r roleMenuBinding) replaceDB(db *gorm.DB) roleMenuBinding {
	r.roleMenuBindingDo.ReplaceDB(db)
	r.Role.db = db.Session(&gorm.Session{})
	r.Menu.db = db.Session(&gorm.Session{})
	return r
}

type roleMenuBindingBelongsToRole struct {
	db *gorm.DB

	field.RelationField

	UserList struct {
		field.RelationField
		RoleList struct {
			field.RelationField
		}
	}
	MenuList struct {
		field.RelationField
		ParentMenu struct {
			field.RelationField
		}
		Children struct {
			field.RelationField
		}
	}
}

func (a roleMenuBindingBelongsToRole) Where(conds ...field.Expr) *roleMenuBindingBelongsToRole {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a roleMenuBindingBelongsToRole) WithContext(ctx context.Context) *roleMenuBindingBelongsToRole {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a roleMenuBindingBelongsToRole) Session(session *gorm.Session) *roleMenuBindingBelongsToRole {
	a.db = a.db.Session(session)
	return &a
}

func (a roleMenuBindingBelongsToRole) Model(m *model.RoleMenuBinding) *roleMenuBindingBelongsToRoleTx {
	return &roleMenuBindingBelongsToRoleTx{a.db.Model(m).Association(a.Name())}
}

func (a roleMenuBindingBelongsToRole) Unscoped() *roleMenuBindingBelongsToRole {
	a.db = a.db.Unscoped()
	return &a
}

type roleMenuBindingBelongsToRoleTx struct{ tx *gorm.Association }

func (a roleMenuBindingBelongsToRoleTx) Find() (result *model.Role, err error) {
	return result, a.tx.Find(&result)
}

func (a roleMenuBindingBelongsToRoleTx) Append(values ...*model.Role) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a roleMenuBindingBelongsToRoleTx) Replace(values ...*model.Role) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a roleMenuBindingBelongsToRoleTx) Delete(values ...*model.Role) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a roleMenuBindingBelongsToRoleTx) Clear() error {
	return a.tx.Clear()
}

func (a roleMenuBindingBelongsToRoleTx) Count() int64 {
	return a.tx.Count()
}

func (a roleMenuBindingBelongsToRoleTx) Unscoped() *roleMenuBindingBelongsToRoleTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type roleMenuBindingBelongsToMenu struct {
	db *gorm.DB

	field.RelationField
}

func (a roleMenuBindingBelongsToMenu) Where(conds ...field.Expr) *roleMenuBindingBelongsToMenu {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a roleMenuBindingBelongsToMenu) WithContext(ctx context.Context) *roleMenuBindingBelongsToMenu {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a roleMenuBindingBelongsToMenu) Session(session *gorm.Session) *roleMenuBindingBelongsToMenu {
	a.db = a.db.Session(session)
	return &a
}

func (a roleMenuBindingBelongsToMenu) Model(m *model.RoleMenuBinding) *roleMenuBindingBelongsToMenuTx {
	return &roleMenuBindingBelongsToMenuTx{a.db.Model(m).Association(a.Name())}
}

func (a roleMenuBindingBelongsToMenu) Unscoped() *roleMenuBindingBelongsToMenu {
	a.db = a.db.Unscoped()
	return &a
}

type roleMenuBindingBelongsToMenuTx struct{ tx *gorm.Association }

func (a roleMenuBindingBelongsToMenuTx) Find() (result *model.Menu, err error) {
	return result, a.tx.Find(&result)
}

func (a roleMenuBindingBelongsToMenuTx) Append(values ...*model.Menu) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a roleMenuBindingBelongsToMenuTx) Replace(values ...*model.Menu) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a roleMenuBindingBelongsToMenuTx) Delete(values ...*model.Menu) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a roleMenuBindingBelongsToMenuTx) Clear() error {
	return a.tx.Clear()
}

func (a roleMenuBindingBelongsToMenuTx) Count() int64 {
	return a.tx.Count()
}

func (a roleMenuBindingBelongsToMenuTx) Unscoped() *roleMenuBindingBelongsToMenuTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type roleMenuBindingDo struct{ gen.DO }

func (r roleMenuBindingDo) Debug() *roleMenuBindingDo {
	return r.withDO(r.DO.Debug())
}

func (r roleMenuBindingDo) WithContext(ctx context.Context) *roleMenuBindingDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r roleMenuBindingDo) ReadDB() *roleMenuBindingDo {
	return r.Clauses(dbresolver.Read)
}

func (r roleMenuBindingDo) WriteDB() *roleMenuBindingDo {
	return r.Clauses(dbresolver.Write)
}

func (r roleMenuBindingDo) Session(config *gorm.Session) *roleMenuBindingDo {
	return r.withDO(r.DO.Session(config))
}

func (r roleMenuBindingDo) Clauses(conds ...clause.Expression) *roleMenuBindingDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r roleMenuBindingDo) Returning(value interface{}, columns ...string) *roleMenuBindingDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r roleMenuBindingDo) Not(conds ...gen.Condition) *roleMenuBindingDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r roleMenuBindingDo) Or(conds ...gen.Condition) *roleMenuBindingDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r roleMenuBindingDo) Select(conds ...field.Expr) *roleMenuBindingDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r roleMenuBindingDo) Where(conds ...gen.Condition) *roleMenuBindingDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r roleMenuBindingDo) Order(conds ...field.Expr) *roleMenuBindingDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r roleMenuBindingDo) Distinct(cols ...field.Expr) *roleMenuBindingDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r roleMenuBindingDo) Omit(cols ...field.Expr) *roleMenuBindingDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r roleMenuBindingDo) Join(table schema.Tabler, on ...field.Expr) *roleMenuBindingDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r roleMenuBindingDo) LeftJoin(table schema.Tabler, on ...field.Expr) *roleMenuBindingDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r roleMenuBindingDo) RightJoin(table schema.Tabler, on ...field.Expr) *roleMenuBindingDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r roleMenuBindingDo) Group(cols ...field.Expr) *roleMenuBindingDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r roleMenuBindingDo) Having(conds ...gen.Condition) *roleMenuBindingDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r roleMenuBindingDo) Limit(limit int) *roleMenuBindingDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r roleMenuBindingDo) Offset(offset int) *roleMenuBindingDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r roleMenuBindingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *roleMenuBindingDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r roleMenuBindingDo) Unscoped() *roleMenuBindingDo {
	return r.withDO(r.DO.Unscoped())
}

func (r roleMenuBindingDo) Create(values ...*model.RoleMenuBinding) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r roleMenuBindingDo) CreateInBatches(values []*model.RoleMenuBinding, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r roleMenuBindingDo) Save(values ...*model.RoleMenuBinding) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r roleMenuBindingDo) First() (*model.RoleMenuBinding, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleMenuBinding), nil
	}
}

func (r roleMenuBindingDo) Take() (*model.RoleMenuBinding, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleMenuBinding), nil
	}
}

func (r roleMenuBindingDo) Last() (*model.RoleMenuBinding, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleMenuBinding), nil
	}
}

func (r roleMenuBindingDo) Find() ([]*model.RoleMenuBinding, error) {
	result, err := r.DO.Find()
	return result.([]*model.RoleMenuBinding), err
}

func (r roleMenuBindingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RoleMenuBinding, err error) {
	buf := make([]*model.RoleMenuBinding, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r roleMenuBindingDo) FindInBatches(result *[]*model.RoleMenuBinding, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r roleMenuBindingDo) Attrs(attrs ...field.AssignExpr) *roleMenuBindingDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r roleMenuBindingDo) Assign(attrs ...field.AssignExpr) *roleMenuBindingDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r roleMenuBindingDo) Joins(fields ...field.RelationField) *roleMenuBindingDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r roleMenuBindingDo) Preload(fields ...field.RelationField) *roleMenuBindingDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r roleMenuBindingDo) FirstOrInit() (*model.RoleMenuBinding, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleMenuBinding), nil
	}
}

func (r roleMenuBindingDo) FirstOrCreate() (*model.RoleMenuBinding, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleMenuBinding), nil
	}
}

func (r roleMenuBindingDo) FindByPage(offset int, limit int) (result []*model.RoleMenuBinding, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r roleMenuBindingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r roleMenuBindingDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r roleMenuBindingDo) Delete(models ...*model.RoleMenuBinding) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *roleMenuBindingDo) withDO(do gen.Dao) *roleMenuBindingDo {
	r.DO = *do.(*gen.DO)
	return r
}
