// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"github.com/KokoiRuby/rbac-based-management-system/backend/domain/model"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newMenu(db *gorm.DB, opts ...gen.DOOption) menu {
	_menu := menu{}

	_menu.menuDo.UseDB(db, opts...)
	_menu.menuDo.UseModel(&model.Menu{})

	tableName := _menu.menuDo.TableName()
	_menu.ALL = field.NewAsterisk(tableName)
	_menu.ID = field.NewUint(tableName, "id")
	_menu.CreatedAt = field.NewTime(tableName, "created_at")
	_menu.UpdatedAt = field.NewTime(tableName, "updated_at")
	_menu.Name = field.NewString(tableName, "name")
	_menu.Path = field.NewString(tableName, "path")
	_menu.Component = field.NewString(tableName, "component")
	_menu.ParentMenuID = field.NewUint(tableName, "parent_menu_id")
	_menu.Sort = field.NewInt(tableName, "sort")
	_menu.Enable = field.NewBool(tableName, "enable")
	_menu.MetaIcon = field.NewString(tableName, "icon")
	_menu.MetaTitle = field.NewString(tableName, "title")
	_menu.Children = menuHasManyChildren{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Children", "model.Menu"),
		ParentMenu: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Children.ParentMenu", "model.Menu"),
		},
		Children: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Children.Children", "model.Menu"),
		},
	}

	_menu.ParentMenu = menuBelongsToParentMenu{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ParentMenu", "model.Menu"),
	}

	_menu.fillFieldMap()

	return _menu
}

type menu struct {
	menuDo

	ALL          field.Asterisk
	ID           field.Uint
	CreatedAt    field.Time
	UpdatedAt    field.Time
	Name         field.String
	Path         field.String
	Component    field.String
	ParentMenuID field.Uint
	Sort         field.Int
	Enable       field.Bool
	MetaIcon     field.String
	MetaTitle    field.String
	Children     menuHasManyChildren

	ParentMenu menuBelongsToParentMenu

	fieldMap map[string]field.Expr
}

func (m menu) Table(newTableName string) *menu {
	m.menuDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m menu) As(alias string) *menu {
	m.menuDo.DO = *(m.menuDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *menu) updateTableName(table string) *menu {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewUint(table, "id")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.Name = field.NewString(table, "name")
	m.Path = field.NewString(table, "path")
	m.Component = field.NewString(table, "component")
	m.ParentMenuID = field.NewUint(table, "parent_menu_id")
	m.Sort = field.NewInt(table, "sort")
	m.Enable = field.NewBool(table, "enable")
	m.MetaIcon = field.NewString(table, "icon")
	m.MetaTitle = field.NewString(table, "title")

	m.fillFieldMap()

	return m
}

func (m *menu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *menu) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 13)
	m.fieldMap["id"] = m.ID
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["name"] = m.Name
	m.fieldMap["path"] = m.Path
	m.fieldMap["component"] = m.Component
	m.fieldMap["parent_menu_id"] = m.ParentMenuID
	m.fieldMap["sort"] = m.Sort
	m.fieldMap["enable"] = m.Enable
	m.fieldMap["icon"] = m.MetaIcon
	m.fieldMap["title"] = m.MetaTitle

}

func (m menu) clone(db *gorm.DB) menu {
	m.menuDo.ReplaceConnPool(db.Statement.ConnPool)
	m.Children.db = db.Session(&gorm.Session{Initialized: true})
	m.Children.db.Statement.ConnPool = db.Statement.ConnPool
	m.ParentMenu.db = db.Session(&gorm.Session{Initialized: true})
	m.ParentMenu.db.Statement.ConnPool = db.Statement.ConnPool
	return m
}

func (m menu) replaceDB(db *gorm.DB) menu {
	m.menuDo.ReplaceDB(db)
	m.Children.db = db.Session(&gorm.Session{})
	m.ParentMenu.db = db.Session(&gorm.Session{})
	return m
}

type menuHasManyChildren struct {
	db *gorm.DB

	field.RelationField

	ParentMenu struct {
		field.RelationField
	}
	Children struct {
		field.RelationField
	}
}

func (a menuHasManyChildren) Where(conds ...field.Expr) *menuHasManyChildren {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a menuHasManyChildren) WithContext(ctx context.Context) *menuHasManyChildren {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a menuHasManyChildren) Session(session *gorm.Session) *menuHasManyChildren {
	a.db = a.db.Session(session)
	return &a
}

func (a menuHasManyChildren) Model(m *model.Menu) *menuHasManyChildrenTx {
	return &menuHasManyChildrenTx{a.db.Model(m).Association(a.Name())}
}

func (a menuHasManyChildren) Unscoped() *menuHasManyChildren {
	a.db = a.db.Unscoped()
	return &a
}

type menuHasManyChildrenTx struct{ tx *gorm.Association }

func (a menuHasManyChildrenTx) Find() (result []*model.Menu, err error) {
	return result, a.tx.Find(&result)
}

func (a menuHasManyChildrenTx) Append(values ...*model.Menu) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a menuHasManyChildrenTx) Replace(values ...*model.Menu) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a menuHasManyChildrenTx) Delete(values ...*model.Menu) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a menuHasManyChildrenTx) Clear() error {
	return a.tx.Clear()
}

func (a menuHasManyChildrenTx) Count() int64 {
	return a.tx.Count()
}

func (a menuHasManyChildrenTx) Unscoped() *menuHasManyChildrenTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type menuBelongsToParentMenu struct {
	db *gorm.DB

	field.RelationField
}

func (a menuBelongsToParentMenu) Where(conds ...field.Expr) *menuBelongsToParentMenu {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a menuBelongsToParentMenu) WithContext(ctx context.Context) *menuBelongsToParentMenu {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a menuBelongsToParentMenu) Session(session *gorm.Session) *menuBelongsToParentMenu {
	a.db = a.db.Session(session)
	return &a
}

func (a menuBelongsToParentMenu) Model(m *model.Menu) *menuBelongsToParentMenuTx {
	return &menuBelongsToParentMenuTx{a.db.Model(m).Association(a.Name())}
}

func (a menuBelongsToParentMenu) Unscoped() *menuBelongsToParentMenu {
	a.db = a.db.Unscoped()
	return &a
}

type menuBelongsToParentMenuTx struct{ tx *gorm.Association }

func (a menuBelongsToParentMenuTx) Find() (result *model.Menu, err error) {
	return result, a.tx.Find(&result)
}

func (a menuBelongsToParentMenuTx) Append(values ...*model.Menu) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a menuBelongsToParentMenuTx) Replace(values ...*model.Menu) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a menuBelongsToParentMenuTx) Delete(values ...*model.Menu) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a menuBelongsToParentMenuTx) Clear() error {
	return a.tx.Clear()
}

func (a menuBelongsToParentMenuTx) Count() int64 {
	return a.tx.Count()
}

func (a menuBelongsToParentMenuTx) Unscoped() *menuBelongsToParentMenuTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type menuDo struct{ gen.DO }

func (m menuDo) Debug() *menuDo {
	return m.withDO(m.DO.Debug())
}

func (m menuDo) WithContext(ctx context.Context) *menuDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m menuDo) ReadDB() *menuDo {
	return m.Clauses(dbresolver.Read)
}

func (m menuDo) WriteDB() *menuDo {
	return m.Clauses(dbresolver.Write)
}

func (m menuDo) Session(config *gorm.Session) *menuDo {
	return m.withDO(m.DO.Session(config))
}

func (m menuDo) Clauses(conds ...clause.Expression) *menuDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m menuDo) Returning(value interface{}, columns ...string) *menuDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m menuDo) Not(conds ...gen.Condition) *menuDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m menuDo) Or(conds ...gen.Condition) *menuDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m menuDo) Select(conds ...field.Expr) *menuDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m menuDo) Where(conds ...gen.Condition) *menuDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m menuDo) Order(conds ...field.Expr) *menuDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m menuDo) Distinct(cols ...field.Expr) *menuDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m menuDo) Omit(cols ...field.Expr) *menuDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m menuDo) Join(table schema.Tabler, on ...field.Expr) *menuDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m menuDo) LeftJoin(table schema.Tabler, on ...field.Expr) *menuDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m menuDo) RightJoin(table schema.Tabler, on ...field.Expr) *menuDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m menuDo) Group(cols ...field.Expr) *menuDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m menuDo) Having(conds ...gen.Condition) *menuDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m menuDo) Limit(limit int) *menuDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m menuDo) Offset(offset int) *menuDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m menuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *menuDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m menuDo) Unscoped() *menuDo {
	return m.withDO(m.DO.Unscoped())
}

func (m menuDo) Create(values ...*model.Menu) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m menuDo) CreateInBatches(values []*model.Menu, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m menuDo) Save(values ...*model.Menu) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m menuDo) First() (*model.Menu, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Menu), nil
	}
}

func (m menuDo) Take() (*model.Menu, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Menu), nil
	}
}

func (m menuDo) Last() (*model.Menu, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Menu), nil
	}
}

func (m menuDo) Find() ([]*model.Menu, error) {
	result, err := m.DO.Find()
	return result.([]*model.Menu), err
}

func (m menuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Menu, err error) {
	buf := make([]*model.Menu, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m menuDo) FindInBatches(result *[]*model.Menu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m menuDo) Attrs(attrs ...field.AssignExpr) *menuDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m menuDo) Assign(attrs ...field.AssignExpr) *menuDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m menuDo) Joins(fields ...field.RelationField) *menuDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m menuDo) Preload(fields ...field.RelationField) *menuDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m menuDo) FirstOrInit() (*model.Menu, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Menu), nil
	}
}

func (m menuDo) FirstOrCreate() (*model.Menu, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Menu), nil
	}
}

func (m menuDo) FindByPage(offset int, limit int) (result []*model.Menu, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m menuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m menuDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m menuDo) Delete(models ...*model.Menu) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *menuDo) withDO(do gen.Dao) *menuDo {
	m.DO = *do.(*gen.DO)
	return m
}
